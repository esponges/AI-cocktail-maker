/* eslint-disable max-len */
import { type NextPage } from "next";
import Head from "next/head";

import { api } from "~/utils/api";
import { useState } from "react";
import {
  ChatCompletionRequestMessageRoleEnum,
  type ChatCompletionRequestMessage,
} from "openai";

// a list of spirits drinks brand names
const spirits = [
  "Absolut Blue",
  "Baileys",
  "Don Julio Blanco",
  "Glenfiddich",
  "Grey Goose",
  "Jack Daniel's",
  "Johnnie Walker Black Label",
  "Beefeater",
  "Bombay Sapphire",
  "Captain Morgan",
];

const systemInitialMessage: ChatCompletionRequestMessage[] = [
  {
    role: ChatCompletionRequestMessageRoleEnum.System,
    content:
      "You are a cocktail maker that can create drinks from a list of spirits brands",
  },
];

const Home: NextPage = () => {
  const [messages, setMessages] =
    useState<Array<ChatCompletionRequestMessage>>(systemInitialMessage);
  const [chosenSpirit, setChosenSpirit] = useState<string | undefined>(
    undefined
  );

  const { mutateAsync, isLoading } = api.drinks.create.useMutation();

  const handleChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    setChosenSpirit(e.target.value);
  };

  const handleCreateClick = async (
    _e: React.MouseEvent<HTMLButtonElement, MouseEvent>
  ) => {
    if (chosenSpirit) {
      const nextContent = {
        role: ChatCompletionRequestMessageRoleEnum.User,
        content: `I want a ${chosenSpirit} cocktail recipe`,
      };

      const res = await mutateAsync({
        brand: chosenSpirit,
        messages: [...messages, nextContent],
      });

      if (!!res.message && res.message !== "Error") {
        setMessages((prev) => [
          ...prev,
          nextContent,
          {
            role: ChatCompletionRequestMessageRoleEnum.Assistant,
            content: res.message as string,
          },
        ]);
      }
    }
  };

  const assistantResponses = messages
    .filter(
      (message) =>
        message.role === ChatCompletionRequestMessageRoleEnum.Assistant
    )
    .reverse();

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]">
        <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16 ">
          {/* a dropdown with all the available spirits */}
          <div className="relative">
            <select
              onChange={handleChange}
              className="h-12 w-full appearance-none rounded-lg border border-white/10 bg-white/10 pl-4 pr-8 text-base text-white focus:border-transparent focus:outline-none focus:ring-2 focus:ring-white/20"
            >
              {spirits.map((spirit) => (
                <option key={spirit}>{spirit}</option>
              ))}
            </select>
            <div className="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2">
              <svg
                className="h-5 w-5 text-white"
                xmlns="http://www.w3.org/2000/svg"
                viewBox="0 0 20 20"
                fill="currentColor"
                aria-hidden="true"
              >
                <path
                  fillRule="evenodd"
                  d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z"
                  clipRule="evenodd"
                />
              </svg>
            </div>
          </div>
          {/* form to submit the chosen spirit */}
          <button
            // eslint-disable-next-line @typescript-eslint/no-misused-promises
            onClick={handleCreateClick}
            className="rounded-md border border-white/10 bg-white/10 px-4 py-2 text-base font-medium text-white shadow-sm hover:bg-white/20 focus:outline-none focus:ring-2 focus:ring-white/20 focus:ring-offset-2 focus:ring-offset-white/10"
          >
            Create Drink
          </button>
          {/* create drink result */}
          {isLoading && (
            <div className="text-2xl font-bold text-white">Loading...</div>
          )}
          {assistantResponses.length > 0 &&
            assistantResponses.map((message, index) => (
              <div
                key={`${message.content}-${index}`}
                className="flex flex-col items-center justify-center gap-4"
              >
                <div
                  className="text-2xl font-bold text-white"
                  style={{ whiteSpace: "pre-wrap" }}
                >
                  {message.content}
                </div>
              </div>
            ))}
        </div>
      </main>
    </>
  );
};

export default Home;
